#!/bin/bash

readonly contentDir=/var/www/html/entries
readonly imageDir=${contentDir}/images
readonly rootdir=$(pwd)/cgi-bin
readonly templatedir=${rootdir}/templates
readonly cachedir=$rootdir/cache

source ./mo

hashedQuery=$(echo $QUERY_STRING | cksum | cut -f 1 -d ' ')

function render {
  cat ${templatedir}/$1 | mo
}

function renderMarkdown {
  perl Markdown.pl --html4Tags $1
}

function setDirs {
  TOPICS=()
  for i in $(ls -d $contentDir/*/); do
    dname=$(basename $i)
    TOPICS+=($dname)
  done
  export TOPICS
}

function parseQueryString {
  LDIR=$(echo $QUERY_STRING | tr '&' '\n' | grep DIR | tr '=' '\n' | tail -n 1)
  LENTRY=$(echo $QUERY_STRING | tr '&' '\n' | grep ENTRY | tr '=' '\n' | tail -n 1)
  LABOUT=$(echo $QUERY_STRING | grep ABOUT | wc -l)
  LIMAGE=$(echo $QUERY_STRING | grep IMAGE | tr '=' '\n' | tail -n 1)
}

function setContent {
  if [[ $LABOUT == 1 ]]; then
    export DATA="$(renderMarkdown $contentDir/about.md)"
    return
  fi
  if [ -z $LDIR ]; then
    export DATA="$(renderMarkdown $contentDir/index.md)"
    return
  fi
  export DIR=$LDIR
  if [ -z $LENTRY ]; then
    if [[ $LDIR == *".."* ]]; then
      export DATA="Illegal argument"
      return
    fi
    ENTRIES=()
    for i in $(ls $contentDir/$LDIR | sort -r); do
      fname=$(basename $i)
      ENTRIES+=($fname)
    done
    export ENTRIES
  else
    if [[ $LENTRY == *".."* ]]; then
      export DATA="Illegal argument."
      return
    fi
    if [ -f $contentDir/$LDIR/$LENTRY ]; then
      if [[ $LENTRY == *".md" ]]; then
        export DATA=$(renderMarkdown $contentDir/$LDIR/$LENTRY | sed 's/<img /<img class="img-responsive" /g')
      else
        export DATA=$(cat $contentDir/$LDIR/$LENTRY)
      fi
    else
      export DATA="Data $contentDir/$LDIR/$LENTRY not found."
    fi
  fi
}

function renderText {
  echo "Content-type: text/html"
  echo ""
  export PAGE_TITLE="Index"
  setDirs
  setContent
  render index.template | tee $cachedir/$hashedQuery
}

function renderImage {
  if [[ $LIMAGE == *".."* ]]; then
    return
  fi
  if  [ -f $imageDir/$LIMAGE ]; then
    echo "Content-type: $(file --mime-type $imageDir/$LIMAGE | awk '{print $2}')"
    echo ""
    dd if=$imageDir/$LIMAGE
  else
    echo "Content-type: text/plain"
    echo ""
    echo "Error when receiving data"
  fi
}

function printData {
  if [ -z $LIMAGE ]; then
    renderText
  else
    renderImage
  fi
}

function main {
  echo 1 > /sys/class/gpio/gpio11/value
  if [ -f $cachedir/$hashedQuery ]; then
    echo "Content-type: text/html"
    echo ""
    cat $cachedir/$hashedQuery
  else
    parseQueryString
    printData
  fi
  echo 0 > /sys/class/gpio/gpio11/value
}

main
